# -*- coding: utf-8 -*-
import re
"""
    from https://github.com/neotune/python-korean-handler/blob/master/korean_handler.py
    초성 중성 종성 분리 하기
        유니코드 한글은 0xAC00 으로부터
        초성 19개, 중상21개, 종성28개로 이루어지고
        이들을 조합한 11,172개의 문자를 갖는다.
        한글코드의 값 = ((초성 * 21) + 중성) * 28 + 종성 + 0xAC00
        (0xAC00은 'ㄱ'의 코드값)
        따라서 다음과 같은 계산 식이 구해진다.
        유니코드 한글 문자 코드 값이 X일 때,
        초성 = ((X - 0xAC00) / 28) / 21
        중성 = ((X - 0xAC00) / 28) % 21
        종성 = (X - 0xAC00) % 28
        이 때 초성, 중성, 종성의 값은 각 소리 글자의 코드값이 아니라
        이들이 각각 몇 번째 문자인가를 나타내기 때문에 다음과 같이 다시 처리한다.
        초성문자코드 = 초성 + 0x1100 //('ㄱ')
        중성문자코드 = 중성 + 0x1161 // ('ㅏ')
        종성문자코드 = 종성 + 0x11A8 - 1 // (종성이 없는 경우가 있으므로 1을 뺌)
"""
# 유니코드 한글 시작 : 44032, 끝 : 55199
base_code, chosung, jungsung = 44032, 588, 28

# 초성 리스트. 00 ~ 18
chosung_list = [
    'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ',
    'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'
]

# 중성 리스트. 00 ~ 20
jungsung_list = [
    'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ', 'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ', 'ㅛ', 'ㅜ', 'ㅝ',
    'ㅞ', 'ㅟ', 'ㅠ', 'ㅡ', 'ㅢ', 'ㅣ'
]

# 종성 리스트. 00 ~ 27 + 1(1개 없음)
jongsung_list = [
    ' ', 'ㄱ', 'ㄲ', 'ㄳ', 'ㄴ', 'ㄵ', 'ㄶ', 'ㄷ', 'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ',
    'ㅀ', 'ㅁ', 'ㅂ', 'ㅄ', 'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'
]

# 두 종류의 아스키코드 사이의 변환 테이블
# 참고: http://secr.tistory.com/211
chosung_ord_trans = {
    12593: 4352, 12594: 4353, 12596: 4354, 12599: 4355, 12600: 4356, 12601: 4357, 12609: 4358,
    12610: 4359, 12611: 4360, 12613: 4361, 12614: 4362, 12615: 4363, 12616: 4364, 12617: 4365,
    12618: 4366, 12619: 4367, 12620: 4368, 12621: 4369, 12622: 4370
}

jungsung_ord_trans = {
    12623: 4449, 12624: 4450, 12625: 4451, 12626: 4452, 12627: 4453, 12628: 4454, 12629: 4455,
    12630: 4456, 12631: 4457, 12632: 4458, 12633: 4459, 12634: 4460, 12635: 4461, 12636: 4462,
    12637: 4463, 12638: 4464, 12639: 4465, 12640: 4466, 12641: 4467, 12642: 4468, 12643: 4469
}

jongsung_ord_trans = {
    12593: 4520, 12594: 4521, 12595: 4522, 12596: 4523, 12597: 4524, 12598: 4525, 12599: 4526,
    12601: 4527, 12602: 4528, 12603: 4529, 12604: 4530, 12605: 4531, 12606: 4532, 12607: 4533,
    12608: 4534, 12609: 4535, 12610: 4536, 12612: 4537, 12613: 4538, 12614: 4539, 12615: 4540,
    12616: 4541, 12618: 4542, 12619: 4543, 12620: 4544, 12621: 4545, 12622: 4546
}

# 음성 합성에 사용되는 토큰의 심벌
symbols = [
    ' ', '!', ',', '.', '?', 'P', 'g', 'gg', 'n', 'd', 'dd', 'l', 'm', 'b', 'pp', 's', 'ss',
    '', 'j', 'jj', 'ch', 'kh', 'th', 'ph', 'h', 'a', 'e', 'ya', 'ye', 'A', 'e', 'yA', 'ye',
    'o', 'oa', 'oe', 'oe', 'yo', 'u', 'uA', 'oe', 'ui', 'yu', 'W', 'Wi', 'i', 'k', 'kk',
    'ks', 'n', 'nj', 'nh', 't', 'l', 'lg', 'lm', 'lb', 'lth', 'lh', 'm', 'p', 'ps', 't',
    'tt', 'N', 't', 'ch', 'kh', 'th', 'ph', 'h'
]

# 심벌 변환 테이블
ord2sym = {
    4352: 'g', 4353: 'gg', 4354: 'n', 4355: 'd', 4356: 'dd', 4357: 'l', 4358: 'm', 4359: 'b',
    4360: 'pp', 4361: 's', 4362: 'ss', 4363: '', 4364: 'j', 4365: 'jj', 4366: 'ch', 4367: 'kh',
    4368: 'th', 4369: 'ph', 4370: 'h', 4526: 't', 32: ' ', 33: '!', 4520: 'k', 4521: 'kg',
    4522: 'ks', 4523: 'n', 44: ',', 4525: 'nh', 46: '.', 4527: 'l', 4528: 'lg', 4529: 'lm',
    4530: 'lb', 4532: 'lth', 4534: 'lh', 4535: 'm', 4536: 'p', 4537: 'ps', 4538: 't', 4524: 'nj',
    4540: 'N', 4541: 't', 4542: 'ch', 63: '?', 4544: 'th', 4545: 'ph', 4546: 'h', 80: 'P',
    4449: 'a', 4450: 'e', 4451: 'ya', 4452: 'ye', 4453: 'A', 4454: 'e', 4455: 'yA', 4456: 'ye',
    4457: 'o', 4458: 'oa', 4459: 'oe', 4460: 'oe', 4461: 'yo', 4462: 'u', 4463: 'uA', 4464: 'oe',
    4465: 'ui', 4466: 'yu', 4467: 'W', 4468: 'Wi', 4469: 'i', 4543: 'kh', 4539: 'ts'
}


def parse(text):
    split_text_list = list(text)
    result = []

    for char in split_text_list:
        if re.match('.*[ㄱ-ㅎㅏ-ㅣ가-힣]+.*', char) is not None:
            char_code = ord(char) - base_code

            char1 = int(char_code / chosung)
            result.append(chr(chosung_ord_trans[ord(chosung_list[char1])]))

            char2 = int((char_code - (chosung * char1)) / jungsung)
            result.append(chr(jungsung_ord_trans[ord(jungsung_list[char2])]))

            char3 = int((char_code - (chosung * char1) - (jungsung * char2)))
            if ord(jongsung_list[char3]) != 32:
                result.append(chr(jongsung_ord_trans[ord(jongsung_list[char3])]))
        else:
            result.append(char)

    return "".join(result)
